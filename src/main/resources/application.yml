spring:
  profiles:
    active: on
    group:
      on: local, live
      blue: blue, local
      green: green, local

server:
  env: blue
---
server:
  shutdown: graceful # 정상적인 종료
  servlet:
    session:
      cookie:
        same-site: none
        secure: true

spring:
  boot:
    admin:
      client:
        url: http://localhost:6061 #admin server url
        instance:
          name: Cherishu Server #admin UI 에서 보여질 이름 설정
          management-base-url: https://back.cherishu.kro.kr
          service-url: https://back.cherishu.kro.kr
        username: ${ADMIN_SERVER_USERNAME}
        password: ${ADMIN_SERVER_PASSWORD}
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://cherishu.ch4c2gs2q8nw.ap-northeast-2.rds.amazonaws.com:5432/postgres?stringtype=unspecified
    username: postgres
    password: ${PASSWORD}
  lifecycle:
    timeout-per-shutdown-phase: 35s
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        #        default_schema: postgres
        dialect: org.hibernate.dialect.PostgreSQLDialect
  profiles:
    active: local
    default: local
  data:
    redis:
      host: localhost
      port: 6379
      repositories:
        enabled: false
    jpa:
      repositories:
        bootstrap-mode: deferred
    web:
      pageable:
        one-indexed-parameters: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${APP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true

decorator:
  datasource:
    p6spy:
      enable-logging: false
logging:
  level:
    org:
      hibernate:
        sql: debug
aws:
  ses:
    access-key: ${SES_ACCESS_KEY}
    secret-key: ${SES_SECRET_KEY}

jwt:
  secret: akwEyVBsYt9djeG77Tejkeo83yzblYcfPQye08f7MGVdjdo19A
  access-token-expire-time: 30m
  refresh-token-expire-time: 14d
cors:
  allowed-methods:
    - GET
    - HEAD
    - POST
    - PATCH
    - DELETE
    - OPTIONS
  allowed-origins:
    - http://127.0.0.1:5173
    - https://cherishu.firebaseapp.com
    - https://cherishu.web.app
    - http://ec2-3-39-238-133.ap-northeast-2.compute.amazonaws.com:6061
    - http://3.37.220.184:80
  allowed-headers:
    - Origin
    - X-Requested-With
    - Content-Type
    - Accept
    - Authorization

management:
  endpoint:
    health:
      enabled: true
      show-components: always
    info:
      enabled: true
    loggers:
      enabled: true
    httpexchanges:
      enabled: true
    logfile:
      enabled: true
  endpoints:
    enabled-by-default: false
    jmx:
      exposure:
        exclude: "*"
    web:
      base-path: /monitor
      exposure:
        include: "info, health, httpexchanges, loggers, logfile"
---
spring:
  config:
    activate:
      on-profile: local
management:
  endpoint:
    health:
      show-details: always
decorator:
  datasource:
    p6spy:
      enable-logging: true

---
spring:
  config:
    activate:
      on-profile: dev, main
management:
  endpoint:
    httpexchanges:
      enabled: false
    logfile:
      external-file: /home/ubuntu/log/cherish.log
  endpoints:
    web:
      exposure:
        include: "info, health, loggers, logfile"
server:
  http2:
    enabled: true
---
spring:
  config:
    activate:
      on-profile: dev
---
spring:
  config:
    activate:
      on-profile: main
vault.props:
  schema: http
  host: ec2-54-180-219-125.ap-northeast-2.compute.amazonaws.com
  port: 8200
  roleId: c34df00a-8f11-10ba-a4ff-adc4242b9b65
  secretId: 9c1ae635-6ea1-7680-4290-688b54855893
  vaultPath: kv/datasource
---
spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080

serverName : blue_server
---
spring:
  config:
    activate:
      on-profile: green

server:
  port: 8081

serverName : green_server
---
spring:
  config:
    activate:
      on-profile: local, live
server:
  address: 0.0.0.0
  port: 8080

serverName: local_server
---
